/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * TransactionInstruction generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`transaction_instruction`")
public class TransactionInstruction implements Serializable {

    private Integer id;
    private String instruction;
    private Integer transactionId;
    private Transaction transaction;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`instruction`", nullable = true, length = 255)
    public String getInstruction() {
        return this.instruction;
    }

    public void setInstruction(String instruction) {
        this.instruction = instruction;
    }

    @Column(name = "`transaction_id`", nullable = true, scale = 0, precision = 10)
    public Integer getTransactionId() {
        return this.transactionId;
    }

    public void setTransactionId(Integer transactionId) {
        this.transactionId = transactionId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`transaction_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_transaction_instructiiie44`"))
    @Fetch(FetchMode.JOIN)
    public Transaction getTransaction() {
        return this.transaction;
    }

    public void setTransaction(Transaction transaction) {
        if(transaction != null) {
            this.transactionId = transaction.getId();
        }

        this.transaction = transaction;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TransactionInstruction)) return false;
        final TransactionInstruction transactionInstruction = (TransactionInstruction) o;
        return Objects.equals(getId(), transactionInstruction.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}
