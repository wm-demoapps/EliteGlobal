/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * PartialAccountTypeMappping generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`partial_account_type_mappping`", uniqueConstraints = {
            @UniqueConstraint(name = "`UK_partial_account_type_56gQM`", columnNames = {"`account_type_id`"})})
public class PartialAccountTypeMappping implements Serializable {

    private Integer id;
    private Integer accountTypeId;
    private String partial;
    private Boolean isActive;
    private AccountType accountType;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`account_type_id`", nullable = true, scale = 0, precision = 10)
    public Integer getAccountTypeId() {
        return this.accountTypeId;
    }

    public void setAccountTypeId(Integer accountTypeId) {
        this.accountTypeId = accountTypeId;
    }

    @Column(name = "`partial`", nullable = true, length = 255)
    public String getPartial() {
        return this.partial;
    }

    public void setPartial(String partial) {
        this.partial = partial;
    }

    @Column(name = "`is_active`", nullable = true)
    public Boolean getIsActive() {
        return this.isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`account_type_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_partial_account_type_7BQL8`"))
    @Fetch(FetchMode.JOIN)
    public AccountType getAccountType() {
        return this.accountType;
    }

    public void setAccountType(AccountType accountType) {
        if(accountType != null) {
            this.accountTypeId = accountType.getId();
        }

        this.accountType = accountType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof PartialAccountTypeMappping)) return false;
        final PartialAccountTypeMappping partialAccountTypeMappping = (PartialAccountTypeMappping) o;
        return Objects.equals(getId(), partialAccountTypeMappping.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}
