/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Transaction generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`transaction`")
public class Transaction implements Serializable {

    private Integer id;
    private Date date;
    private Integer paymentMethodId;
    private Integer sourceAccountId;
    private Integer benericiaryId;
    private Integer amount;
    private String description;
    private String corporateRefNo;
    private Integer transactionStatusId;
    private Integer transactionTypeId;
    private String paymentInstruction;
    private Account account;
    private Beneficiary beneficiary;
    private PaymentMethod paymentMethod;
    private TransactionType transactionType;
    private TransactionStatus transactionStatus;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`date`", nullable = true)
    public Date getDate() {
        return this.date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    @Column(name = "`payment_method_id`", nullable = true, scale = 0, precision = 10)
    public Integer getPaymentMethodId() {
        return this.paymentMethodId;
    }

    public void setPaymentMethodId(Integer paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
    }

    @Column(name = "`source_account_id`", nullable = true, scale = 0, precision = 10)
    public Integer getSourceAccountId() {
        return this.sourceAccountId;
    }

    public void setSourceAccountId(Integer sourceAccountId) {
        this.sourceAccountId = sourceAccountId;
    }

    @Column(name = "`benericiary_id`", nullable = true, scale = 0, precision = 10)
    public Integer getBenericiaryId() {
        return this.benericiaryId;
    }

    public void setBenericiaryId(Integer benericiaryId) {
        this.benericiaryId = benericiaryId;
    }

    @Column(name = "`amount`", nullable = true, scale = 0, precision = 10)
    public Integer getAmount() {
        return this.amount;
    }

    public void setAmount(Integer amount) {
        this.amount = amount;
    }

    @Column(name = "`description`", nullable = true, length = 255)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "`corporate_ref_no`", nullable = true, length = 255)
    public String getCorporateRefNo() {
        return this.corporateRefNo;
    }

    public void setCorporateRefNo(String corporateRefNo) {
        this.corporateRefNo = corporateRefNo;
    }

    @Column(name = "`transaction_status_id`", nullable = true, scale = 0, precision = 10)
    public Integer getTransactionStatusId() {
        return this.transactionStatusId;
    }

    public void setTransactionStatusId(Integer transactionStatusId) {
        this.transactionStatusId = transactionStatusId;
    }

    @Column(name = "`transaction_type_id`", nullable = true, scale = 0, precision = 10)
    public Integer getTransactionTypeId() {
        return this.transactionTypeId;
    }

    public void setTransactionTypeId(Integer transactionTypeId) {
        this.transactionTypeId = transactionTypeId;
    }

    @Column(name = "`payment_instruction`", nullable = true, length = 255)
    public String getPaymentInstruction() {
        return this.paymentInstruction;
    }

    public void setPaymentInstruction(String paymentInstruction) {
        this.paymentInstruction = paymentInstruction;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`source_account_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_transaction_TO_accounVz6oF`"))
    @Fetch(FetchMode.JOIN)
    public Account getAccount() {
        return this.account;
    }

    public void setAccount(Account account) {
        if(account != null) {
            this.sourceAccountId = account.getId();
        }

        this.account = account;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`benericiary_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_transaction_TO_benefik73TZ`"))
    @Fetch(FetchMode.JOIN)
    public Beneficiary getBeneficiary() {
        return this.beneficiary;
    }

    public void setBeneficiary(Beneficiary beneficiary) {
        if(beneficiary != null) {
            this.benericiaryId = beneficiary.getId();
        }

        this.beneficiary = beneficiary;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`payment_method_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_transaction_TO_paymenk2Dwd`"))
    @Fetch(FetchMode.JOIN)
    public PaymentMethod getPaymentMethod() {
        return this.paymentMethod;
    }

    public void setPaymentMethod(PaymentMethod paymentMethod) {
        if(paymentMethod != null) {
            this.paymentMethodId = paymentMethod.getId();
        }

        this.paymentMethod = paymentMethod;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`transaction_type_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_transaction_TO_transaFMA6r`"))
    @Fetch(FetchMode.JOIN)
    public TransactionType getTransactionType() {
        return this.transactionType;
    }

    public void setTransactionType(TransactionType transactionType) {
        if(transactionType != null) {
            this.transactionTypeId = transactionType.getId();
        }

        this.transactionType = transactionType;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`transaction_status_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_transaction_TO_transaWohpe`"))
    @Fetch(FetchMode.JOIN)
    public TransactionStatus getTransactionStatus() {
        return this.transactionStatus;
    }

    public void setTransactionStatus(TransactionStatus transactionStatus) {
        if(transactionStatus != null) {
            this.transactionStatusId = transactionStatus.getId();
        }

        this.transactionStatus = transactionStatus;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Transaction)) return false;
        final Transaction transaction = (Transaction) o;
        return Objects.equals(getId(), transaction.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}
