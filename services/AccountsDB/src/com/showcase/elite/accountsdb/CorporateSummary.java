/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * CorporateSummary generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`corporate_summary`", uniqueConstraints = {
            @UniqueConstraint(name = "`UK_corporate_summary_corQ6EGJ`", columnNames = {"`corporate_id`"})})
public class CorporateSummary implements Serializable {

    private Integer id;
    private Integer netAvailableBalance;
    private Integer availableLimit;
    private Integer allPayables;
    private Integer allReceivables;
    private Integer corporateId;
    private Corporate corporate;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`net_available_balance`", nullable = true, scale = 0, precision = 10)
    public Integer getNetAvailableBalance() {
        return this.netAvailableBalance;
    }

    public void setNetAvailableBalance(Integer netAvailableBalance) {
        this.netAvailableBalance = netAvailableBalance;
    }

    @Column(name = "`available_limit`", nullable = true, scale = 0, precision = 10)
    public Integer getAvailableLimit() {
        return this.availableLimit;
    }

    public void setAvailableLimit(Integer availableLimit) {
        this.availableLimit = availableLimit;
    }

    @Column(name = "`all_payables`", nullable = true, scale = 0, precision = 10)
    public Integer getAllPayables() {
        return this.allPayables;
    }

    public void setAllPayables(Integer allPayables) {
        this.allPayables = allPayables;
    }

    @Column(name = "`all_receivables`", nullable = true, scale = 0, precision = 10)
    public Integer getAllReceivables() {
        return this.allReceivables;
    }

    public void setAllReceivables(Integer allReceivables) {
        this.allReceivables = allReceivables;
    }

    @Column(name = "`corporate_id`", nullable = true, scale = 0, precision = 10)
    public Integer getCorporateId() {
        return this.corporateId;
    }

    public void setCorporateId(Integer corporateId) {
        this.corporateId = corporateId;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`corporate_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_corporate_summary_TO_lnJ4t`"))
    @Fetch(FetchMode.JOIN)
    public Corporate getCorporate() {
        return this.corporate;
    }

    public void setCorporate(Corporate corporate) {
        if(corporate != null) {
            this.corporateId = corporate.getId();
        }

        this.corporate = corporate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CorporateSummary)) return false;
        final CorporateSummary corporateSummary = (CorporateSummary) o;
        return Objects.equals(getId(), corporateSummary.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}
