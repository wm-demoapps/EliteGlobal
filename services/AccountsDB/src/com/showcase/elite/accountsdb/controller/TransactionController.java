/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.showcase.elite.accountsdb.Transaction;
import com.showcase.elite.accountsdb.TransactionInstruction;
import com.showcase.elite.accountsdb.service.TransactionService;


/**
 * Controller object for domain model class Transaction.
 * @see Transaction
 */
@RestController("AccountsDB.TransactionController")
@Api(value = "TransactionController", description = "Exposes APIs to work with Transaction resource.")
@RequestMapping("/AccountsDB/Transaction")
public class TransactionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TransactionController.class);

    @Autowired
	@Qualifier("AccountsDB.TransactionService")
	private TransactionService transactionService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Transaction instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Transaction createTransaction(@RequestBody Transaction transaction) {
		LOGGER.debug("Create Transaction with information: {}" , transaction);

		transaction = transactionService.create(transaction);
		LOGGER.debug("Created Transaction with information: {}" , transaction);

	    return transaction;
	}

    @ApiOperation(value = "Returns the Transaction instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Transaction getTransaction(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Transaction with id: {}" , id);

        Transaction foundTransaction = transactionService.getById(id);
        LOGGER.debug("Transaction details with id: {}" , foundTransaction);

        return foundTransaction;
    }

    @ApiOperation(value = "Updates the Transaction instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Transaction editTransaction(@PathVariable("id") Integer id, @RequestBody Transaction transaction) {
        LOGGER.debug("Editing Transaction with id: {}" , transaction.getId());

        transaction.setId(id);
        transaction = transactionService.update(transaction);
        LOGGER.debug("Transaction details with id: {}" , transaction);

        return transaction;
    }
    
    @ApiOperation(value = "Partially updates the Transaction instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Transaction patchTransaction(@PathVariable("id") Integer id, @RequestBody @MapTo(Transaction.class) Map<String, Object> transactionPatch) {
        LOGGER.debug("Partially updating Transaction with id: {}" , id);

        Transaction transaction = transactionService.partialUpdate(id, transactionPatch);
        LOGGER.debug("Transaction details after partial update: {}" , transaction);

        return transaction;
    }

    @ApiOperation(value = "Deletes the Transaction instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTransaction(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Transaction with id: {}" , id);

        Transaction deletedTransaction = transactionService.delete(id);

        return deletedTransaction != null;
    }

    /**
     * @deprecated Use {@link #findTransactions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Transaction instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Transaction> searchTransactionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Transactions list by query filter:{}", (Object) queryFilters);
        return transactionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Transaction instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Transaction> findTransactions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Transactions list by filter:", query);
        return transactionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Transaction instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Transaction> filterTransactions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Transactions list by filter", query);
        return transactionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTransactions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return transactionService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTransactionsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Transaction.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> transactionService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Transaction instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTransactions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Transactions");
		return transactionService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTransactionAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return transactionService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/transactionInstructions")
    @ApiOperation(value = "Gets the transactionInstructions instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TransactionInstruction> findAssociatedTransactionInstructions(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated transactionInstructions");
        return transactionService.findAssociatedTransactionInstructions(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TransactionService instance
	 */
	protected void setTransactionService(TransactionService service) {
		this.transactionService = service;
	}

}
