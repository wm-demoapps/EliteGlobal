/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.showcase.elite.accountsdb.Account;
import com.showcase.elite.accountsdb.Corporate;
import com.showcase.elite.accountsdb.CorporateUser;
import com.showcase.elite.accountsdb.service.CorporateService;


/**
 * Controller object for domain model class Corporate.
 * @see Corporate
 */
@RestController("AccountsDB.CorporateController")
@Api(value = "CorporateController", description = "Exposes APIs to work with Corporate resource.")
@RequestMapping("/AccountsDB/Corporate")
public class CorporateController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CorporateController.class);

    @Autowired
	@Qualifier("AccountsDB.CorporateService")
	private CorporateService corporateService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Corporate instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Corporate createCorporate(@RequestBody Corporate corporate) {
		LOGGER.debug("Create Corporate with information: {}" , corporate);

		corporate = corporateService.create(corporate);
		LOGGER.debug("Created Corporate with information: {}" , corporate);

	    return corporate;
	}

    @ApiOperation(value = "Returns the Corporate instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Corporate getCorporate(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Corporate with id: {}" , id);

        Corporate foundCorporate = corporateService.getById(id);
        LOGGER.debug("Corporate details with id: {}" , foundCorporate);

        return foundCorporate;
    }

    @ApiOperation(value = "Updates the Corporate instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Corporate editCorporate(@PathVariable("id") Integer id, @RequestBody Corporate corporate) {
        LOGGER.debug("Editing Corporate with id: {}" , corporate.getId());

        corporate.setId(id);
        corporate = corporateService.update(corporate);
        LOGGER.debug("Corporate details with id: {}" , corporate);

        return corporate;
    }
    
    @ApiOperation(value = "Partially updates the Corporate instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Corporate patchCorporate(@PathVariable("id") Integer id, @RequestBody @MapTo(Corporate.class) Map<String, Object> corporatePatch) {
        LOGGER.debug("Partially updating Corporate with id: {}" , id);

        Corporate corporate = corporateService.partialUpdate(id, corporatePatch);
        LOGGER.debug("Corporate details after partial update: {}" , corporate);

        return corporate;
    }

    @ApiOperation(value = "Deletes the Corporate instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCorporate(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Corporate with id: {}" , id);

        Corporate deletedCorporate = corporateService.delete(id);

        return deletedCorporate != null;
    }

    /**
     * @deprecated Use {@link #findCorporates(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Corporate instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Corporate> searchCorporatesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Corporates list by query filter:{}", (Object) queryFilters);
        return corporateService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Corporate instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Corporate> findCorporates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Corporates list by filter:", query);
        return corporateService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Corporate instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Corporate> filterCorporates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Corporates list by filter", query);
        return corporateService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCorporates(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return corporateService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCorporatesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Corporate.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> corporateService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Corporate instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCorporates( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Corporates");
		return corporateService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCorporateAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return corporateService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/accounts")
    @ApiOperation(value = "Gets the accounts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Account> findAssociatedAccounts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated accounts");
        return corporateService.findAssociatedAccounts(id, pageable);
    }

    @GetMapping(value="/{id:.+}/corporateUsers")
    @ApiOperation(value = "Gets the corporateUsers instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CorporateUser> findAssociatedCorporateUsers(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated corporateUsers");
        return corporateService.findAssociatedCorporateUsers(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CorporateService instance
	 */
	protected void setCorporateService(CorporateService service) {
		this.corporateService = service;
	}

}
