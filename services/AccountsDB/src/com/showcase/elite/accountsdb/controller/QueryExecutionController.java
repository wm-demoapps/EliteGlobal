/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.showcase.elite.accountsdb.service.AccountsDBQueryExecutorService;
import com.showcase.elite.accountsdb.models.query.*;

@RestController(value = "AccountsDB.QueryExecutionController")
@RequestMapping("/AccountsDB/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private AccountsDBQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @GetMapping(value = "/queries/getUserByEmail")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getUserByEmail")
    public GetUserByEmailResponse executeGetUserByEmail(@RequestParam(value = "email") String email, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getUserByEmail");
        GetUserByEmailResponse _result = queryService.executeGetUserByEmail(email);
        LOGGER.debug("got the result for named query: getUserByEmail, result:{}", _result);
        return _result;
    }

    @PutMapping(value = "/queries/updateMultipleTransactionStatus")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "updateMultipleTransactionStatus")
    public IntegerWrapper executeUpdateMultipleTransactionStatus(@Valid @RequestBody UpdateMultipleTransactionStatusRequest updateMultipleTransactionStatusRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: updateMultipleTransactionStatus");
        Integer _result = queryService.executeUpdateMultipleTransactionStatus(updateMultipleTransactionStatusRequest);
        LOGGER.debug("got the result for named query: updateMultipleTransactionStatus, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @GetMapping(value = "/queries/getFrequentTransactions")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Frequent Transactions")
    public Page<GetFrequentTransactionsResponse> executeGetFrequentTransactions(@RequestParam(value = "beneficiaryId") String beneficiaryId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getFrequentTransactions");
        Page<GetFrequentTransactionsResponse> _result = queryService.executeGetFrequentTransactions(beneficiaryId, pageable);
        LOGGER.debug("got the result for named query: getFrequentTransactions, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getFrequentTransactions")
    @PostMapping(value = "/queries/getFrequentTransactions/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetFrequentTransactions(@RequestParam(value = "beneficiaryId") String beneficiaryId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getFrequentTransactions");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getFrequentTransactions";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetFrequentTransactions(beneficiaryId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/getMostFrequentTransactions")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getMostFrequentTransactions")
    public Page<GetMostFrequentTransactionsResponse> executeGetMostFrequentTransactions(@RequestParam(value = "corporateId") Integer corporateId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getMostFrequentTransactions");
        Page<GetMostFrequentTransactionsResponse> _result = queryService.executeGetMostFrequentTransactions(corporateId, pageable);
        LOGGER.debug("got the result for named query: getMostFrequentTransactions, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getMostFrequentTransactions")
    @PostMapping(value = "/queries/getMostFrequentTransactions/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetMostFrequentTransactions(@RequestParam(value = "corporateId") Integer corporateId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getMostFrequentTransactions");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getMostFrequentTransactions";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetMostFrequentTransactions(corporateId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/getAccountsSummaryByType")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getAccountsSummaryByType")
    public Page<GetAccountsSummaryByTypeResponse> executeGetAccountsSummaryByType(@RequestParam(value = "corporateId") Integer corporateId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getAccountsSummaryByType");
        Page<GetAccountsSummaryByTypeResponse> _result = queryService.executeGetAccountsSummaryByType(corporateId, pageable);
        LOGGER.debug("got the result for named query: getAccountsSummaryByType, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getAccountsSummaryByType")
    @PostMapping(value = "/queries/getAccountsSummaryByType/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetAccountsSummaryByType(@RequestParam(value = "corporateId") Integer corporateId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getAccountsSummaryByType");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getAccountsSummaryByType";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetAccountsSummaryByType(corporateId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/getOverallTransactions")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get total number and total value of overall transactions")
    public Page<GetOverallTransactionsResponse> executeGetOverallTransactions(@RequestParam(value = "corporateId") Integer corporateId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getOverallTransactions");
        Page<GetOverallTransactionsResponse> _result = queryService.executeGetOverallTransactions(corporateId, pageable);
        LOGGER.debug("got the result for named query: getOverallTransactions, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getOverallTransactions")
    @PostMapping(value = "/queries/getOverallTransactions/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetOverallTransactions(@RequestParam(value = "corporateId") Integer corporateId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getOverallTransactions");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getOverallTransactions";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetOverallTransactions(corporateId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/getTotalAccountBalanceForCorporate")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getTotalAccountBalanceForCorporate")
    public GetTotalAccountBalanceForCorporateResponse executeGetTotalAccountBalanceForCorporate(@RequestParam(value = "corporateId") Integer corporateId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getTotalAccountBalanceForCorporate");
        GetTotalAccountBalanceForCorporateResponse _result = queryService.executeGetTotalAccountBalanceForCorporate(corporateId);
        LOGGER.debug("got the result for named query: getTotalAccountBalanceForCorporate, result:{}", _result);
        return _result;
    }

    @GetMapping(value = "/queries/getTotalTransactions")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Total Number of Transactions")
    public Page<GetTotalTransactionsResponse> executeGetTotalTransactions(@RequestParam(value = "corporateId") Integer corporateId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getTotalTransactions");
        Page<GetTotalTransactionsResponse> _result = queryService.executeGetTotalTransactions(corporateId, pageable);
        LOGGER.debug("got the result for named query: getTotalTransactions, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getTotalTransactions")
    @PostMapping(value = "/queries/getTotalTransactions/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetTotalTransactions(@RequestParam(value = "corporateId") Integer corporateId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getTotalTransactions");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getTotalTransactions";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetTotalTransactions(corporateId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}
