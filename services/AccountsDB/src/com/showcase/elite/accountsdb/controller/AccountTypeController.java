/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.showcase.elite.accountsdb.Account;
import com.showcase.elite.accountsdb.AccountType;
import com.showcase.elite.accountsdb.service.AccountTypeService;


/**
 * Controller object for domain model class AccountType.
 * @see AccountType
 */
@RestController("AccountsDB.AccountTypeController")
@Api(value = "AccountTypeController", description = "Exposes APIs to work with AccountType resource.")
@RequestMapping("/AccountsDB/AccountType")
public class AccountTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountTypeController.class);

    @Autowired
	@Qualifier("AccountsDB.AccountTypeService")
	private AccountTypeService accountTypeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AccountType instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AccountType createAccountType(@RequestBody AccountType accountType) {
		LOGGER.debug("Create AccountType with information: {}" , accountType);

		accountType = accountTypeService.create(accountType);
		LOGGER.debug("Created AccountType with information: {}" , accountType);

	    return accountType;
	}

    @ApiOperation(value = "Returns the AccountType instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AccountType getAccountType(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting AccountType with id: {}" , id);

        AccountType foundAccountType = accountTypeService.getById(id);
        LOGGER.debug("AccountType details with id: {}" , foundAccountType);

        return foundAccountType;
    }

    @ApiOperation(value = "Updates the AccountType instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AccountType editAccountType(@PathVariable("id") Integer id, @RequestBody AccountType accountType) {
        LOGGER.debug("Editing AccountType with id: {}" , accountType.getId());

        accountType.setId(id);
        accountType = accountTypeService.update(accountType);
        LOGGER.debug("AccountType details with id: {}" , accountType);

        return accountType;
    }
    
    @ApiOperation(value = "Partially updates the AccountType instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AccountType patchAccountType(@PathVariable("id") Integer id, @RequestBody @MapTo(AccountType.class) Map<String, Object> accountTypePatch) {
        LOGGER.debug("Partially updating AccountType with id: {}" , id);

        AccountType accountType = accountTypeService.partialUpdate(id, accountTypePatch);
        LOGGER.debug("AccountType details after partial update: {}" , accountType);

        return accountType;
    }

    @ApiOperation(value = "Deletes the AccountType instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAccountType(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting AccountType with id: {}" , id);

        AccountType deletedAccountType = accountTypeService.delete(id);

        return deletedAccountType != null;
    }

    /**
     * @deprecated Use {@link #findAccountTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AccountType instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountType> searchAccountTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AccountTypes list by query filter:{}", (Object) queryFilters);
        return accountTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AccountType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountType> findAccountTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AccountTypes list by filter:", query);
        return accountTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AccountType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountType> filterAccountTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AccountTypes list by filter", query);
        return accountTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAccountTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return accountTypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAccountTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AccountType.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> accountTypeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AccountType instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAccountTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AccountTypes");
		return accountTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAccountTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return accountTypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/accounts")
    @ApiOperation(value = "Gets the accounts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Account> findAssociatedAccounts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated accounts");
        return accountTypeService.findAssociatedAccounts(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccountTypeService instance
	 */
	protected void setAccountTypeService(AccountTypeService service) {
		this.accountTypeService = service;
	}

}
