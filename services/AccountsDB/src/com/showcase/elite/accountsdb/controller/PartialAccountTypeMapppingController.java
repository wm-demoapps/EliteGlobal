/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.showcase.elite.accountsdb.PartialAccountTypeMappping;
import com.showcase.elite.accountsdb.service.PartialAccountTypeMapppingService;


/**
 * Controller object for domain model class PartialAccountTypeMappping.
 * @see PartialAccountTypeMappping
 */
@RestController("AccountsDB.PartialAccountTypeMapppingController")
@Api(value = "PartialAccountTypeMapppingController", description = "Exposes APIs to work with PartialAccountTypeMappping resource.")
@RequestMapping("/AccountsDB/PartialAccountTypeMappping")
public class PartialAccountTypeMapppingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartialAccountTypeMapppingController.class);

    @Autowired
	@Qualifier("AccountsDB.PartialAccountTypeMapppingService")
	private PartialAccountTypeMapppingService partialAccountTypeMapppingService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new PartialAccountTypeMappping instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartialAccountTypeMappping createPartialAccountTypeMappping(@RequestBody PartialAccountTypeMappping partialAccountTypeMappping) {
		LOGGER.debug("Create PartialAccountTypeMappping with information: {}" , partialAccountTypeMappping);

		partialAccountTypeMappping = partialAccountTypeMapppingService.create(partialAccountTypeMappping);
		LOGGER.debug("Created PartialAccountTypeMappping with information: {}" , partialAccountTypeMappping);

	    return partialAccountTypeMappping;
	}

    @ApiOperation(value = "Returns the PartialAccountTypeMappping instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartialAccountTypeMappping getPartialAccountTypeMappping(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting PartialAccountTypeMappping with id: {}" , id);

        PartialAccountTypeMappping foundPartialAccountTypeMappping = partialAccountTypeMapppingService.getById(id);
        LOGGER.debug("PartialAccountTypeMappping details with id: {}" , foundPartialAccountTypeMappping);

        return foundPartialAccountTypeMappping;
    }

    @ApiOperation(value = "Updates the PartialAccountTypeMappping instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartialAccountTypeMappping editPartialAccountTypeMappping(@PathVariable("id") Integer id, @RequestBody PartialAccountTypeMappping partialAccountTypeMappping) {
        LOGGER.debug("Editing PartialAccountTypeMappping with id: {}" , partialAccountTypeMappping.getId());

        partialAccountTypeMappping.setId(id);
        partialAccountTypeMappping = partialAccountTypeMapppingService.update(partialAccountTypeMappping);
        LOGGER.debug("PartialAccountTypeMappping details with id: {}" , partialAccountTypeMappping);

        return partialAccountTypeMappping;
    }
    
    @ApiOperation(value = "Partially updates the PartialAccountTypeMappping instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartialAccountTypeMappping patchPartialAccountTypeMappping(@PathVariable("id") Integer id, @RequestBody @MapTo(PartialAccountTypeMappping.class) Map<String, Object> partialAccountTypeMapppingPatch) {
        LOGGER.debug("Partially updating PartialAccountTypeMappping with id: {}" , id);

        PartialAccountTypeMappping partialAccountTypeMappping = partialAccountTypeMapppingService.partialUpdate(id, partialAccountTypeMapppingPatch);
        LOGGER.debug("PartialAccountTypeMappping details after partial update: {}" , partialAccountTypeMappping);

        return partialAccountTypeMappping;
    }

    @ApiOperation(value = "Deletes the PartialAccountTypeMappping instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePartialAccountTypeMappping(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting PartialAccountTypeMappping with id: {}" , id);

        PartialAccountTypeMappping deletedPartialAccountTypeMappping = partialAccountTypeMapppingService.delete(id);

        return deletedPartialAccountTypeMappping != null;
    }

    @GetMapping(value = "/accountTypeId/{accountTypeId}" )
    @ApiOperation(value = "Returns the matching PartialAccountTypeMappping with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartialAccountTypeMappping getByAccountTypeId(@PathVariable("accountTypeId") Integer accountTypeId) {
        LOGGER.debug("Getting PartialAccountTypeMappping with uniques key AccountTypeId");
        return partialAccountTypeMapppingService.getByAccountTypeId(accountTypeId);
    }

    /**
     * @deprecated Use {@link #findPartialAccountTypeMapppings(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PartialAccountTypeMappping instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartialAccountTypeMappping> searchPartialAccountTypeMapppingsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PartialAccountTypeMapppings list by query filter:{}", (Object) queryFilters);
        return partialAccountTypeMapppingService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PartialAccountTypeMappping instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartialAccountTypeMappping> findPartialAccountTypeMapppings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PartialAccountTypeMapppings list by filter:", query);
        return partialAccountTypeMapppingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PartialAccountTypeMappping instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartialAccountTypeMappping> filterPartialAccountTypeMapppings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PartialAccountTypeMapppings list by filter", query);
        return partialAccountTypeMapppingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPartialAccountTypeMapppings(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return partialAccountTypeMapppingService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPartialAccountTypeMapppingsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = PartialAccountTypeMappping.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> partialAccountTypeMapppingService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of PartialAccountTypeMappping instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPartialAccountTypeMapppings( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PartialAccountTypeMapppings");
		return partialAccountTypeMapppingService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPartialAccountTypeMapppingAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return partialAccountTypeMapppingService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartialAccountTypeMapppingService instance
	 */
	protected void setPartialAccountTypeMapppingService(PartialAccountTypeMapppingService service) {
		this.partialAccountTypeMapppingService = service;
	}

}
