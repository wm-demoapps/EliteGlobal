/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.showcase.elite.accountsdb.TransactionInstruction;
import com.showcase.elite.accountsdb.service.TransactionInstructionService;


/**
 * Controller object for domain model class TransactionInstruction.
 * @see TransactionInstruction
 */
@RestController("AccountsDB.TransactionInstructionController")
@Api(value = "TransactionInstructionController", description = "Exposes APIs to work with TransactionInstruction resource.")
@RequestMapping("/AccountsDB/TransactionInstruction")
public class TransactionInstructionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TransactionInstructionController.class);

    @Autowired
	@Qualifier("AccountsDB.TransactionInstructionService")
	private TransactionInstructionService transactionInstructionService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TransactionInstruction instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TransactionInstruction createTransactionInstruction(@RequestBody TransactionInstruction transactionInstruction) {
		LOGGER.debug("Create TransactionInstruction with information: {}" , transactionInstruction);

		transactionInstruction = transactionInstructionService.create(transactionInstruction);
		LOGGER.debug("Created TransactionInstruction with information: {}" , transactionInstruction);

	    return transactionInstruction;
	}

    @ApiOperation(value = "Returns the TransactionInstruction instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TransactionInstruction getTransactionInstruction(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TransactionInstruction with id: {}" , id);

        TransactionInstruction foundTransactionInstruction = transactionInstructionService.getById(id);
        LOGGER.debug("TransactionInstruction details with id: {}" , foundTransactionInstruction);

        return foundTransactionInstruction;
    }

    @ApiOperation(value = "Updates the TransactionInstruction instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TransactionInstruction editTransactionInstruction(@PathVariable("id") Integer id, @RequestBody TransactionInstruction transactionInstruction) {
        LOGGER.debug("Editing TransactionInstruction with id: {}" , transactionInstruction.getId());

        transactionInstruction.setId(id);
        transactionInstruction = transactionInstructionService.update(transactionInstruction);
        LOGGER.debug("TransactionInstruction details with id: {}" , transactionInstruction);

        return transactionInstruction;
    }
    
    @ApiOperation(value = "Partially updates the TransactionInstruction instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TransactionInstruction patchTransactionInstruction(@PathVariable("id") Integer id, @RequestBody @MapTo(TransactionInstruction.class) Map<String, Object> transactionInstructionPatch) {
        LOGGER.debug("Partially updating TransactionInstruction with id: {}" , id);

        TransactionInstruction transactionInstruction = transactionInstructionService.partialUpdate(id, transactionInstructionPatch);
        LOGGER.debug("TransactionInstruction details after partial update: {}" , transactionInstruction);

        return transactionInstruction;
    }

    @ApiOperation(value = "Deletes the TransactionInstruction instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTransactionInstruction(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TransactionInstruction with id: {}" , id);

        TransactionInstruction deletedTransactionInstruction = transactionInstructionService.delete(id);

        return deletedTransactionInstruction != null;
    }

    /**
     * @deprecated Use {@link #findTransactionInstructions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TransactionInstruction instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TransactionInstruction> searchTransactionInstructionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TransactionInstructions list by query filter:{}", (Object) queryFilters);
        return transactionInstructionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TransactionInstruction instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TransactionInstruction> findTransactionInstructions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TransactionInstructions list by filter:", query);
        return transactionInstructionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TransactionInstruction instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TransactionInstruction> filterTransactionInstructions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TransactionInstructions list by filter", query);
        return transactionInstructionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTransactionInstructions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return transactionInstructionService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTransactionInstructionsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TransactionInstruction.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> transactionInstructionService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TransactionInstruction instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTransactionInstructions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TransactionInstructions");
		return transactionInstructionService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTransactionInstructionAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return transactionInstructionService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TransactionInstructionService instance
	 */
	protected void setTransactionInstructionService(TransactionInstructionService service) {
		this.transactionInstructionService = service;
	}

}
