/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.showcase.elite.accountsdb.Account;
import com.showcase.elite.accountsdb.Transaction;
import com.showcase.elite.accountsdb.service.AccountService;


/**
 * Controller object for domain model class Account.
 * @see Account
 */
@RestController("AccountsDB.AccountController")
@Api(value = "AccountController", description = "Exposes APIs to work with Account resource.")
@RequestMapping("/AccountsDB/Account")
public class AccountController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountController.class);

    @Autowired
	@Qualifier("AccountsDB.AccountService")
	private AccountService accountService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Account instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Account createAccount(@RequestBody Account account) {
		LOGGER.debug("Create Account with information: {}" , account);

		account = accountService.create(account);
		LOGGER.debug("Created Account with information: {}" , account);

	    return account;
	}

    @ApiOperation(value = "Returns the Account instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Account getAccount(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Account with id: {}" , id);

        Account foundAccount = accountService.getById(id);
        LOGGER.debug("Account details with id: {}" , foundAccount);

        return foundAccount;
    }

    @ApiOperation(value = "Updates the Account instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Account editAccount(@PathVariable("id") Integer id, @RequestBody Account account) {
        LOGGER.debug("Editing Account with id: {}" , account.getId());

        account.setId(id);
        account = accountService.update(account);
        LOGGER.debug("Account details with id: {}" , account);

        return account;
    }
    
    @ApiOperation(value = "Partially updates the Account instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Account patchAccount(@PathVariable("id") Integer id, @RequestBody @MapTo(Account.class) Map<String, Object> accountPatch) {
        LOGGER.debug("Partially updating Account with id: {}" , id);

        Account account = accountService.partialUpdate(id, accountPatch);
        LOGGER.debug("Account details after partial update: {}" , account);

        return account;
    }

    @ApiOperation(value = "Deletes the Account instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAccount(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Account with id: {}" , id);

        Account deletedAccount = accountService.delete(id);

        return deletedAccount != null;
    }

    /**
     * @deprecated Use {@link #findAccounts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Account instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Account> searchAccountsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Accounts list by query filter:{}", (Object) queryFilters);
        return accountService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Account instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Account> findAccounts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Accounts list by filter:", query);
        return accountService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Account instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Account> filterAccounts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Accounts list by filter", query);
        return accountService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAccounts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return accountService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAccountsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Account.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> accountService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Account instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAccounts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Accounts");
		return accountService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAccountAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return accountService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/transactions")
    @ApiOperation(value = "Gets the transactions instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Transaction> findAssociatedTransactions(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated transactions");
        return accountService.findAssociatedTransactions(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccountService instance
	 */
	protected void setAccountService(AccountService service) {
		this.accountService = service;
	}

}
