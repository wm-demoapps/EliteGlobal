/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.CreditLineDetails;

/**
 * Service object for domain model class {@link CreditLineDetails}.
 */
public interface CreditLineDetailsService {

    /**
     * Creates a new CreditLineDetails. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CreditLineDetails if any.
     *
     * @param creditLineDetails Details of the CreditLineDetails to be created; value cannot be null.
     * @return The newly created CreditLineDetails.
     */
    CreditLineDetails create(@Valid CreditLineDetails creditLineDetails);


	/**
     * Returns CreditLineDetails by given id if exists.
     *
     * @param creditlinedetailsId The id of the CreditLineDetails to get; value cannot be null.
     * @return CreditLineDetails associated with the given creditlinedetailsId.
	 * @throws EntityNotFoundException If no CreditLineDetails is found.
     */
    CreditLineDetails getById(Integer creditlinedetailsId);

    /**
     * Find and return the CreditLineDetails by given id if exists, returns null otherwise.
     *
     * @param creditlinedetailsId The id of the CreditLineDetails to get; value cannot be null.
     * @return CreditLineDetails associated with the given creditlinedetailsId.
     */
    CreditLineDetails findById(Integer creditlinedetailsId);

	/**
     * Find and return the list of CreditLineDetails by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param creditlinedetailsIds The id's of the CreditLineDetails to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return CreditLineDetails associated with the given creditlinedetailsIds.
     */
    List<CreditLineDetails> findByMultipleIds(List<Integer> creditlinedetailsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing CreditLineDetails. It replaces all fields of the existing CreditLineDetails with the given creditLineDetails.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CreditLineDetails if any.
     *
     * @param creditLineDetails The details of the CreditLineDetails to be updated; value cannot be null.
     * @return The updated CreditLineDetails.
     * @throws EntityNotFoundException if no CreditLineDetails is found with given input.
     */
    CreditLineDetails update(@Valid CreditLineDetails creditLineDetails);


    /**
     * Partially updates the details of an existing CreditLineDetails. It updates only the
     * fields of the existing CreditLineDetails which are passed in the creditLineDetailsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CreditLineDetails if any.
     *
     * @param creditlinedetailsId The id of the CreditLineDetails to be deleted; value cannot be null.
     * @param creditLineDetailsPatch The partial data of CreditLineDetails which is supposed to be updated; value cannot be null.
     * @return The updated CreditLineDetails.
     * @throws EntityNotFoundException if no CreditLineDetails is found with given input.
     */
    CreditLineDetails partialUpdate(Integer creditlinedetailsId, Map<String, Object> creditLineDetailsPatch);

    /**
     * Deletes an existing CreditLineDetails with the given id.
     *
     * @param creditlinedetailsId The id of the CreditLineDetails to be deleted; value cannot be null.
     * @return The deleted CreditLineDetails.
     * @throws EntityNotFoundException if no CreditLineDetails found with the given id.
     */
    CreditLineDetails delete(Integer creditlinedetailsId);

    /**
     * Deletes an existing CreditLineDetails with the given object.
     *
     * @param creditLineDetails The instance of the CreditLineDetails to be deleted; value cannot be null.
     */
    void delete(CreditLineDetails creditLineDetails);

    /**
     * Find all CreditLineDetails matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CreditLineDetails.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<CreditLineDetails> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all CreditLineDetails matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CreditLineDetails.
     *
     * @see Pageable
     * @see Page
     */
    Page<CreditLineDetails> findAll(String query, Pageable pageable);

    /**
     * Exports all CreditLineDetails matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all CreditLineDetails matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the CreditLineDetails in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the CreditLineDetails.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
