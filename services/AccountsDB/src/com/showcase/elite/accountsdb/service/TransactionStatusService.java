/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.Transaction;
import com.showcase.elite.accountsdb.TransactionStatus;

/**
 * Service object for domain model class {@link TransactionStatus}.
 */
public interface TransactionStatusService {

    /**
     * Creates a new TransactionStatus. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TransactionStatus if any.
     *
     * @param transactionStatus Details of the TransactionStatus to be created; value cannot be null.
     * @return The newly created TransactionStatus.
     */
    TransactionStatus create(@Valid TransactionStatus transactionStatus);


	/**
     * Returns TransactionStatus by given id if exists.
     *
     * @param transactionstatusId The id of the TransactionStatus to get; value cannot be null.
     * @return TransactionStatus associated with the given transactionstatusId.
	 * @throws EntityNotFoundException If no TransactionStatus is found.
     */
    TransactionStatus getById(Integer transactionstatusId);

    /**
     * Find and return the TransactionStatus by given id if exists, returns null otherwise.
     *
     * @param transactionstatusId The id of the TransactionStatus to get; value cannot be null.
     * @return TransactionStatus associated with the given transactionstatusId.
     */
    TransactionStatus findById(Integer transactionstatusId);

	/**
     * Find and return the list of TransactionStatuses by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param transactionstatusIds The id's of the TransactionStatus to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TransactionStatuses associated with the given transactionstatusIds.
     */
    List<TransactionStatus> findByMultipleIds(List<Integer> transactionstatusIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TransactionStatus. It replaces all fields of the existing TransactionStatus with the given transactionStatus.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TransactionStatus if any.
     *
     * @param transactionStatus The details of the TransactionStatus to be updated; value cannot be null.
     * @return The updated TransactionStatus.
     * @throws EntityNotFoundException if no TransactionStatus is found with given input.
     */
    TransactionStatus update(@Valid TransactionStatus transactionStatus);


    /**
     * Partially updates the details of an existing TransactionStatus. It updates only the
     * fields of the existing TransactionStatus which are passed in the transactionStatusPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TransactionStatus if any.
     *
     * @param transactionstatusId The id of the TransactionStatus to be deleted; value cannot be null.
     * @param transactionStatusPatch The partial data of TransactionStatus which is supposed to be updated; value cannot be null.
     * @return The updated TransactionStatus.
     * @throws EntityNotFoundException if no TransactionStatus is found with given input.
     */
    TransactionStatus partialUpdate(Integer transactionstatusId, Map<String, Object> transactionStatusPatch);

    /**
     * Deletes an existing TransactionStatus with the given id.
     *
     * @param transactionstatusId The id of the TransactionStatus to be deleted; value cannot be null.
     * @return The deleted TransactionStatus.
     * @throws EntityNotFoundException if no TransactionStatus found with the given id.
     */
    TransactionStatus delete(Integer transactionstatusId);

    /**
     * Deletes an existing TransactionStatus with the given object.
     *
     * @param transactionStatus The instance of the TransactionStatus to be deleted; value cannot be null.
     */
    void delete(TransactionStatus transactionStatus);

    /**
     * Find all TransactionStatuses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TransactionStatuses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TransactionStatus> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TransactionStatuses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TransactionStatuses.
     *
     * @see Pageable
     * @see Page
     */
    Page<TransactionStatus> findAll(String query, Pageable pageable);

    /**
     * Exports all TransactionStatuses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TransactionStatuses matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TransactionStatuses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TransactionStatus.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated transactions for given TransactionStatus id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Transaction instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Transaction> findAssociatedTransactions(Integer id, Pageable pageable);

}
