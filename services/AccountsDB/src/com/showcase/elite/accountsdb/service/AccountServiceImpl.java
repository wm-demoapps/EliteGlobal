/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.Account;
import com.showcase.elite.accountsdb.Transaction;


/**
 * ServiceImpl object for domain model class Account.
 *
 * @see Account
 */
@Service("AccountsDB.AccountService")
@Validated
@EntityService(entityClass = Account.class, serviceId = "AccountsDB")
public class AccountServiceImpl implements AccountService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("AccountsDB.TransactionService")
    private TransactionService transactionService;

    @Autowired
    @Qualifier("AccountsDB.AccountDao")
    private WMGenericDao<Account, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Account, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public Account create(Account account) {
        LOGGER.debug("Creating a new Account with information: {}", account);

        Account accountCreated = this.wmGenericDao.create(account);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(accountCreated);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Account getById(Integer accountId) {
        LOGGER.debug("Finding Account by id: {}", accountId);
        return this.wmGenericDao.findById(accountId);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Account findById(Integer accountId) {
        LOGGER.debug("Finding Account by id: {}", accountId);
        try {
            return this.wmGenericDao.findById(accountId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Account found with id: {}", accountId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public List<Account> findByMultipleIds(List<Integer> accountIds, boolean orderedReturn) {
        LOGGER.debug("Finding Accounts by ids: {}", accountIds);

        return this.wmGenericDao.findByMultipleIds(accountIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AccountsDBTransactionManager")
    @Override
    public Account update(Account account) {
        LOGGER.debug("Updating Account with information: {}", account);

        this.wmGenericDao.update(account);
        this.wmGenericDao.refresh(account);

        return account;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public Account partialUpdate(Integer accountId, Map<String, Object>accountPatch) {
        LOGGER.debug("Partially Updating the Account with id: {}", accountId);

        Account account = getById(accountId);

        try {
            ObjectReader accountReader = this.objectMapper.reader().forType(Account.class).withValueToUpdate(account);
            account = accountReader.readValue(this.objectMapper.writeValueAsString(accountPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", accountPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        account = update(account);

        return account;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public Account delete(Integer accountId) {
        LOGGER.debug("Deleting Account with id: {}", accountId);
        Account deleted = this.wmGenericDao.findById(accountId);
        if (deleted == null) {
            LOGGER.debug("No Account found with id: {}", accountId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Account.class.getSimpleName(), accountId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public void delete(Account account) {
        LOGGER.debug("Deleting Account with {}", account);
        this.wmGenericDao.delete(account);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Account> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Accounts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Account> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Accounts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AccountsDB for table Account to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AccountsDB for table Account to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Transaction> findAssociatedTransactions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated transactions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("account.id = '" + id + "'");

        return transactionService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TransactionService instance
     */
    protected void setTransactionService(TransactionService service) {
        this.transactionService = service;
    }

}
