/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.CreditLineDetails;


/**
 * ServiceImpl object for domain model class CreditLineDetails.
 *
 * @see CreditLineDetails
 */
@Service("AccountsDB.CreditLineDetailsService")
@Validated
@EntityService(entityClass = CreditLineDetails.class, serviceId = "AccountsDB")
public class CreditLineDetailsServiceImpl implements CreditLineDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CreditLineDetailsServiceImpl.class);


    @Autowired
    @Qualifier("AccountsDB.CreditLineDetailsDao")
    private WMGenericDao<CreditLineDetails, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<CreditLineDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public CreditLineDetails create(CreditLineDetails creditLineDetails) {
        LOGGER.debug("Creating a new CreditLineDetails with information: {}", creditLineDetails);

        CreditLineDetails creditLineDetailsCreated = this.wmGenericDao.create(creditLineDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(creditLineDetailsCreated);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public CreditLineDetails getById(Integer creditlinedetailsId) {
        LOGGER.debug("Finding CreditLineDetails by id: {}", creditlinedetailsId);
        return this.wmGenericDao.findById(creditlinedetailsId);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public CreditLineDetails findById(Integer creditlinedetailsId) {
        LOGGER.debug("Finding CreditLineDetails by id: {}", creditlinedetailsId);
        try {
            return this.wmGenericDao.findById(creditlinedetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CreditLineDetails found with id: {}", creditlinedetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public List<CreditLineDetails> findByMultipleIds(List<Integer> creditlinedetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding CreditLineDetails by ids: {}", creditlinedetailsIds);

        return this.wmGenericDao.findByMultipleIds(creditlinedetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AccountsDBTransactionManager")
    @Override
    public CreditLineDetails update(CreditLineDetails creditLineDetails) {
        LOGGER.debug("Updating CreditLineDetails with information: {}", creditLineDetails);

        this.wmGenericDao.update(creditLineDetails);
        this.wmGenericDao.refresh(creditLineDetails);

        return creditLineDetails;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public CreditLineDetails partialUpdate(Integer creditlinedetailsId, Map<String, Object>creditLineDetailsPatch) {
        LOGGER.debug("Partially Updating the CreditLineDetails with id: {}", creditlinedetailsId);

        CreditLineDetails creditLineDetails = getById(creditlinedetailsId);

        try {
            ObjectReader creditLineDetailsReader = this.objectMapper.reader().forType(CreditLineDetails.class).withValueToUpdate(creditLineDetails);
            creditLineDetails = creditLineDetailsReader.readValue(this.objectMapper.writeValueAsString(creditLineDetailsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", creditLineDetailsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        creditLineDetails = update(creditLineDetails);

        return creditLineDetails;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public CreditLineDetails delete(Integer creditlinedetailsId) {
        LOGGER.debug("Deleting CreditLineDetails with id: {}", creditlinedetailsId);
        CreditLineDetails deleted = this.wmGenericDao.findById(creditlinedetailsId);
        if (deleted == null) {
            LOGGER.debug("No CreditLineDetails found with id: {}", creditlinedetailsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), CreditLineDetails.class.getSimpleName(), creditlinedetailsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public void delete(CreditLineDetails creditLineDetails) {
        LOGGER.debug("Deleting CreditLineDetails with {}", creditLineDetails);
        this.wmGenericDao.delete(creditLineDetails);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<CreditLineDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CreditLineDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<CreditLineDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CreditLineDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AccountsDB for table CreditLineDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AccountsDB for table CreditLineDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
