/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.CorporateSummary;


/**
 * ServiceImpl object for domain model class CorporateSummary.
 *
 * @see CorporateSummary
 */
@Service("AccountsDB.CorporateSummaryService")
@Validated
@EntityService(entityClass = CorporateSummary.class, serviceId = "AccountsDB")
public class CorporateSummaryServiceImpl implements CorporateSummaryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CorporateSummaryServiceImpl.class);


    @Autowired
    @Qualifier("AccountsDB.CorporateSummaryDao")
    private WMGenericDao<CorporateSummary, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<CorporateSummary, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public CorporateSummary create(CorporateSummary corporateSummary) {
        LOGGER.debug("Creating a new CorporateSummary with information: {}", corporateSummary);

        CorporateSummary corporateSummaryCreated = this.wmGenericDao.create(corporateSummary);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(corporateSummaryCreated);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public CorporateSummary getById(Integer corporatesummaryId) {
        LOGGER.debug("Finding CorporateSummary by id: {}", corporatesummaryId);
        return this.wmGenericDao.findById(corporatesummaryId);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public CorporateSummary findById(Integer corporatesummaryId) {
        LOGGER.debug("Finding CorporateSummary by id: {}", corporatesummaryId);
        try {
            return this.wmGenericDao.findById(corporatesummaryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CorporateSummary found with id: {}", corporatesummaryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public List<CorporateSummary> findByMultipleIds(List<Integer> corporatesummaryIds, boolean orderedReturn) {
        LOGGER.debug("Finding CorporateSummaries by ids: {}", corporatesummaryIds);

        return this.wmGenericDao.findByMultipleIds(corporatesummaryIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public CorporateSummary getByCorporateId(Integer corporateId) {
        Map<String, Object> corporateIdMap = new HashMap<>();
        corporateIdMap.put("corporateId", corporateId);

        LOGGER.debug("Finding CorporateSummary by unique keys: {}", corporateIdMap);
        return this.wmGenericDao.findByUniqueKey(corporateIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AccountsDBTransactionManager")
    @Override
    public CorporateSummary update(CorporateSummary corporateSummary) {
        LOGGER.debug("Updating CorporateSummary with information: {}", corporateSummary);

        this.wmGenericDao.update(corporateSummary);
        this.wmGenericDao.refresh(corporateSummary);

        return corporateSummary;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public CorporateSummary partialUpdate(Integer corporatesummaryId, Map<String, Object>corporateSummaryPatch) {
        LOGGER.debug("Partially Updating the CorporateSummary with id: {}", corporatesummaryId);

        CorporateSummary corporateSummary = getById(corporatesummaryId);

        try {
            ObjectReader corporateSummaryReader = this.objectMapper.reader().forType(CorporateSummary.class).withValueToUpdate(corporateSummary);
            corporateSummary = corporateSummaryReader.readValue(this.objectMapper.writeValueAsString(corporateSummaryPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", corporateSummaryPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        corporateSummary = update(corporateSummary);

        return corporateSummary;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public CorporateSummary delete(Integer corporatesummaryId) {
        LOGGER.debug("Deleting CorporateSummary with id: {}", corporatesummaryId);
        CorporateSummary deleted = this.wmGenericDao.findById(corporatesummaryId);
        if (deleted == null) {
            LOGGER.debug("No CorporateSummary found with id: {}", corporatesummaryId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), CorporateSummary.class.getSimpleName(), corporatesummaryId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public void delete(CorporateSummary corporateSummary) {
        LOGGER.debug("Deleting CorporateSummary with {}", corporateSummary);
        this.wmGenericDao.delete(corporateSummary);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<CorporateSummary> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CorporateSummaries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<CorporateSummary> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CorporateSummaries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AccountsDB for table CorporateSummary to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AccountsDB for table CorporateSummary to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
