/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.CorporateUser;

/**
 * Service object for domain model class {@link CorporateUser}.
 */
public interface CorporateUserService {

    /**
     * Creates a new CorporateUser. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CorporateUser if any.
     *
     * @param corporateUser Details of the CorporateUser to be created; value cannot be null.
     * @return The newly created CorporateUser.
     */
    CorporateUser create(@Valid CorporateUser corporateUser);


	/**
     * Returns CorporateUser by given id if exists.
     *
     * @param corporateuserId The id of the CorporateUser to get; value cannot be null.
     * @return CorporateUser associated with the given corporateuserId.
	 * @throws EntityNotFoundException If no CorporateUser is found.
     */
    CorporateUser getById(Integer corporateuserId);

    /**
     * Find and return the CorporateUser by given id if exists, returns null otherwise.
     *
     * @param corporateuserId The id of the CorporateUser to get; value cannot be null.
     * @return CorporateUser associated with the given corporateuserId.
     */
    CorporateUser findById(Integer corporateuserId);

	/**
     * Find and return the list of CorporateUsers by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param corporateuserIds The id's of the CorporateUser to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return CorporateUsers associated with the given corporateuserIds.
     */
    List<CorporateUser> findByMultipleIds(List<Integer> corporateuserIds, boolean orderedReturn);

    /**
     * Find and return the CorporateUser for given username  andemail  if exists.
     *
     * @param username value of username; value cannot be null.
     * @param email value of email; value cannot be null.
     * @return CorporateUser associated with the given inputs.
     * @throws EntityNotFoundException if no matching CorporateUser found.
     */
    CorporateUser getByUsernameAndEmail(String username, String email);

    /**
     * Updates the details of an existing CorporateUser. It replaces all fields of the existing CorporateUser with the given corporateUser.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CorporateUser if any.
     *
     * @param corporateUser The details of the CorporateUser to be updated; value cannot be null.
     * @return The updated CorporateUser.
     * @throws EntityNotFoundException if no CorporateUser is found with given input.
     */
    CorporateUser update(@Valid CorporateUser corporateUser);


    /**
     * Partially updates the details of an existing CorporateUser. It updates only the
     * fields of the existing CorporateUser which are passed in the corporateUserPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CorporateUser if any.
     *
     * @param corporateuserId The id of the CorporateUser to be deleted; value cannot be null.
     * @param corporateUserPatch The partial data of CorporateUser which is supposed to be updated; value cannot be null.
     * @return The updated CorporateUser.
     * @throws EntityNotFoundException if no CorporateUser is found with given input.
     */
    CorporateUser partialUpdate(Integer corporateuserId, Map<String, Object> corporateUserPatch);

    /**
     * Deletes an existing CorporateUser with the given id.
     *
     * @param corporateuserId The id of the CorporateUser to be deleted; value cannot be null.
     * @return The deleted CorporateUser.
     * @throws EntityNotFoundException if no CorporateUser found with the given id.
     */
    CorporateUser delete(Integer corporateuserId);

    /**
     * Deletes an existing CorporateUser with the given object.
     *
     * @param corporateUser The instance of the CorporateUser to be deleted; value cannot be null.
     */
    void delete(CorporateUser corporateUser);

    /**
     * Find all CorporateUsers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CorporateUsers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<CorporateUser> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all CorporateUsers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CorporateUsers.
     *
     * @see Pageable
     * @see Page
     */
    Page<CorporateUser> findAll(String query, Pageable pageable);

    /**
     * Exports all CorporateUsers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all CorporateUsers matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the CorporateUsers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the CorporateUser.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
