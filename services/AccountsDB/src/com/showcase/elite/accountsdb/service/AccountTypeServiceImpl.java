/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.Account;
import com.showcase.elite.accountsdb.AccountType;


/**
 * ServiceImpl object for domain model class AccountType.
 *
 * @see AccountType
 */
@Service("AccountsDB.AccountTypeService")
@Validated
@EntityService(entityClass = AccountType.class, serviceId = "AccountsDB")
public class AccountTypeServiceImpl implements AccountTypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountTypeServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("AccountsDB.AccountService")
    private AccountService accountService;

    @Autowired
    @Qualifier("AccountsDB.AccountTypeDao")
    private WMGenericDao<AccountType, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<AccountType, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public AccountType create(AccountType accountType) {
        LOGGER.debug("Creating a new AccountType with information: {}", accountType);

        AccountType accountTypeCreated = this.wmGenericDao.create(accountType);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(accountTypeCreated);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public AccountType getById(Integer accounttypeId) {
        LOGGER.debug("Finding AccountType by id: {}", accounttypeId);
        return this.wmGenericDao.findById(accounttypeId);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public AccountType findById(Integer accounttypeId) {
        LOGGER.debug("Finding AccountType by id: {}", accounttypeId);
        try {
            return this.wmGenericDao.findById(accounttypeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AccountType found with id: {}", accounttypeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public List<AccountType> findByMultipleIds(List<Integer> accounttypeIds, boolean orderedReturn) {
        LOGGER.debug("Finding AccountTypes by ids: {}", accounttypeIds);

        return this.wmGenericDao.findByMultipleIds(accounttypeIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AccountsDBTransactionManager")
    @Override
    public AccountType update(AccountType accountType) {
        LOGGER.debug("Updating AccountType with information: {}", accountType);

        this.wmGenericDao.update(accountType);
        this.wmGenericDao.refresh(accountType);

        return accountType;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public AccountType partialUpdate(Integer accounttypeId, Map<String, Object>accountTypePatch) {
        LOGGER.debug("Partially Updating the AccountType with id: {}", accounttypeId);

        AccountType accountType = getById(accounttypeId);

        try {
            ObjectReader accountTypeReader = this.objectMapper.reader().forType(AccountType.class).withValueToUpdate(accountType);
            accountType = accountTypeReader.readValue(this.objectMapper.writeValueAsString(accountTypePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", accountTypePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        accountType = update(accountType);

        return accountType;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public AccountType delete(Integer accounttypeId) {
        LOGGER.debug("Deleting AccountType with id: {}", accounttypeId);
        AccountType deleted = this.wmGenericDao.findById(accounttypeId);
        if (deleted == null) {
            LOGGER.debug("No AccountType found with id: {}", accounttypeId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), AccountType.class.getSimpleName(), accounttypeId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public void delete(AccountType accountType) {
        LOGGER.debug("Deleting AccountType with {}", accountType);
        this.wmGenericDao.delete(accountType);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<AccountType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AccountTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<AccountType> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AccountTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AccountsDB for table AccountType to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AccountsDB for table AccountType to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Account> findAssociatedAccounts(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated accounts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("accountType.id = '" + id + "'");

        return accountService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AccountService instance
     */
    protected void setAccountService(AccountService service) {
        this.accountService = service;
    }

}
