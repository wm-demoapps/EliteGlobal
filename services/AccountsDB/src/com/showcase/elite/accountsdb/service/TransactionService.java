/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.Transaction;
import com.showcase.elite.accountsdb.TransactionInstruction;

/**
 * Service object for domain model class {@link Transaction}.
 */
public interface TransactionService {

    /**
     * Creates a new Transaction. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Transaction if any.
     *
     * @param transaction Details of the Transaction to be created; value cannot be null.
     * @return The newly created Transaction.
     */
    Transaction create(@Valid Transaction transaction);


	/**
     * Returns Transaction by given id if exists.
     *
     * @param transactionId The id of the Transaction to get; value cannot be null.
     * @return Transaction associated with the given transactionId.
	 * @throws EntityNotFoundException If no Transaction is found.
     */
    Transaction getById(Integer transactionId);

    /**
     * Find and return the Transaction by given id if exists, returns null otherwise.
     *
     * @param transactionId The id of the Transaction to get; value cannot be null.
     * @return Transaction associated with the given transactionId.
     */
    Transaction findById(Integer transactionId);

	/**
     * Find and return the list of Transactions by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param transactionIds The id's of the Transaction to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Transactions associated with the given transactionIds.
     */
    List<Transaction> findByMultipleIds(List<Integer> transactionIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Transaction. It replaces all fields of the existing Transaction with the given transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Transaction if any.
     *
     * @param transaction The details of the Transaction to be updated; value cannot be null.
     * @return The updated Transaction.
     * @throws EntityNotFoundException if no Transaction is found with given input.
     */
    Transaction update(@Valid Transaction transaction);


    /**
     * Partially updates the details of an existing Transaction. It updates only the
     * fields of the existing Transaction which are passed in the transactionPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Transaction if any.
     *
     * @param transactionId The id of the Transaction to be deleted; value cannot be null.
     * @param transactionPatch The partial data of Transaction which is supposed to be updated; value cannot be null.
     * @return The updated Transaction.
     * @throws EntityNotFoundException if no Transaction is found with given input.
     */
    Transaction partialUpdate(Integer transactionId, Map<String, Object> transactionPatch);

    /**
     * Deletes an existing Transaction with the given id.
     *
     * @param transactionId The id of the Transaction to be deleted; value cannot be null.
     * @return The deleted Transaction.
     * @throws EntityNotFoundException if no Transaction found with the given id.
     */
    Transaction delete(Integer transactionId);

    /**
     * Deletes an existing Transaction with the given object.
     *
     * @param transaction The instance of the Transaction to be deleted; value cannot be null.
     */
    void delete(Transaction transaction);

    /**
     * Find all Transactions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Transactions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Transaction> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Transactions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Transactions.
     *
     * @see Pageable
     * @see Page
     */
    Page<Transaction> findAll(String query, Pageable pageable);

    /**
     * Exports all Transactions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Transactions matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Transactions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Transaction.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated transactionInstructions for given Transaction id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TransactionInstruction instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TransactionInstruction> findAssociatedTransactionInstructions(Integer id, Pageable pageable);

}
