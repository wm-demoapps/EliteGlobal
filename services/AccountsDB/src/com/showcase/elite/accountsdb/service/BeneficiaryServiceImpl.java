/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.Beneficiary;
import com.showcase.elite.accountsdb.Transaction;


/**
 * ServiceImpl object for domain model class Beneficiary.
 *
 * @see Beneficiary
 */
@Service("AccountsDB.BeneficiaryService")
@Validated
@EntityService(entityClass = Beneficiary.class, serviceId = "AccountsDB")
public class BeneficiaryServiceImpl implements BeneficiaryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BeneficiaryServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("AccountsDB.TransactionService")
    private TransactionService transactionService;

    @Autowired
    @Qualifier("AccountsDB.BeneficiaryDao")
    private WMGenericDao<Beneficiary, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Beneficiary, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public Beneficiary create(Beneficiary beneficiary) {
        LOGGER.debug("Creating a new Beneficiary with information: {}", beneficiary);

        Beneficiary beneficiaryCreated = this.wmGenericDao.create(beneficiary);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(beneficiaryCreated);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Beneficiary getById(Integer beneficiaryId) {
        LOGGER.debug("Finding Beneficiary by id: {}", beneficiaryId);
        return this.wmGenericDao.findById(beneficiaryId);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Beneficiary findById(Integer beneficiaryId) {
        LOGGER.debug("Finding Beneficiary by id: {}", beneficiaryId);
        try {
            return this.wmGenericDao.findById(beneficiaryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Beneficiary found with id: {}", beneficiaryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public List<Beneficiary> findByMultipleIds(List<Integer> beneficiaryIds, boolean orderedReturn) {
        LOGGER.debug("Finding Beneficiaries by ids: {}", beneficiaryIds);

        return this.wmGenericDao.findByMultipleIds(beneficiaryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AccountsDBTransactionManager")
    @Override
    public Beneficiary update(Beneficiary beneficiary) {
        LOGGER.debug("Updating Beneficiary with information: {}", beneficiary);

        this.wmGenericDao.update(beneficiary);
        this.wmGenericDao.refresh(beneficiary);

        return beneficiary;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public Beneficiary partialUpdate(Integer beneficiaryId, Map<String, Object>beneficiaryPatch) {
        LOGGER.debug("Partially Updating the Beneficiary with id: {}", beneficiaryId);

        Beneficiary beneficiary = getById(beneficiaryId);

        try {
            ObjectReader beneficiaryReader = this.objectMapper.reader().forType(Beneficiary.class).withValueToUpdate(beneficiary);
            beneficiary = beneficiaryReader.readValue(this.objectMapper.writeValueAsString(beneficiaryPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", beneficiaryPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        beneficiary = update(beneficiary);

        return beneficiary;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public Beneficiary delete(Integer beneficiaryId) {
        LOGGER.debug("Deleting Beneficiary with id: {}", beneficiaryId);
        Beneficiary deleted = this.wmGenericDao.findById(beneficiaryId);
        if (deleted == null) {
            LOGGER.debug("No Beneficiary found with id: {}", beneficiaryId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Beneficiary.class.getSimpleName(), beneficiaryId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public void delete(Beneficiary beneficiary) {
        LOGGER.debug("Deleting Beneficiary with {}", beneficiary);
        this.wmGenericDao.delete(beneficiary);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Beneficiary> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Beneficiaries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Beneficiary> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Beneficiaries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AccountsDB for table Beneficiary to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AccountsDB for table Beneficiary to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Transaction> findAssociatedTransactions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated transactions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("beneficiary.id = '" + id + "'");

        return transactionService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TransactionService instance
     */
    protected void setTransactionService(TransactionService service) {
        this.transactionService = service;
    }

}
