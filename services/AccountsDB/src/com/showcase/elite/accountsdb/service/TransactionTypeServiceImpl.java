/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.Transaction;
import com.showcase.elite.accountsdb.TransactionType;


/**
 * ServiceImpl object for domain model class TransactionType.
 *
 * @see TransactionType
 */
@Service("AccountsDB.TransactionTypeService")
@Validated
@EntityService(entityClass = TransactionType.class, serviceId = "AccountsDB")
public class TransactionTypeServiceImpl implements TransactionTypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TransactionTypeServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("AccountsDB.TransactionService")
    private TransactionService transactionService;

    @Autowired
    @Qualifier("AccountsDB.TransactionTypeDao")
    private WMGenericDao<TransactionType, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TransactionType, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public TransactionType create(TransactionType transactionType) {
        LOGGER.debug("Creating a new TransactionType with information: {}", transactionType);

        TransactionType transactionTypeCreated = this.wmGenericDao.create(transactionType);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(transactionTypeCreated);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public TransactionType getById(Integer transactiontypeId) {
        LOGGER.debug("Finding TransactionType by id: {}", transactiontypeId);
        return this.wmGenericDao.findById(transactiontypeId);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public TransactionType findById(Integer transactiontypeId) {
        LOGGER.debug("Finding TransactionType by id: {}", transactiontypeId);
        try {
            return this.wmGenericDao.findById(transactiontypeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TransactionType found with id: {}", transactiontypeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public List<TransactionType> findByMultipleIds(List<Integer> transactiontypeIds, boolean orderedReturn) {
        LOGGER.debug("Finding TransactionTypes by ids: {}", transactiontypeIds);

        return this.wmGenericDao.findByMultipleIds(transactiontypeIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AccountsDBTransactionManager")
    @Override
    public TransactionType update(TransactionType transactionType) {
        LOGGER.debug("Updating TransactionType with information: {}", transactionType);

        this.wmGenericDao.update(transactionType);
        this.wmGenericDao.refresh(transactionType);

        return transactionType;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public TransactionType partialUpdate(Integer transactiontypeId, Map<String, Object>transactionTypePatch) {
        LOGGER.debug("Partially Updating the TransactionType with id: {}", transactiontypeId);

        TransactionType transactionType = getById(transactiontypeId);

        try {
            ObjectReader transactionTypeReader = this.objectMapper.reader().forType(TransactionType.class).withValueToUpdate(transactionType);
            transactionType = transactionTypeReader.readValue(this.objectMapper.writeValueAsString(transactionTypePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", transactionTypePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        transactionType = update(transactionType);

        return transactionType;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public TransactionType delete(Integer transactiontypeId) {
        LOGGER.debug("Deleting TransactionType with id: {}", transactiontypeId);
        TransactionType deleted = this.wmGenericDao.findById(transactiontypeId);
        if (deleted == null) {
            LOGGER.debug("No TransactionType found with id: {}", transactiontypeId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TransactionType.class.getSimpleName(), transactiontypeId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public void delete(TransactionType transactionType) {
        LOGGER.debug("Deleting TransactionType with {}", transactionType);
        this.wmGenericDao.delete(transactionType);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<TransactionType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TransactionTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<TransactionType> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TransactionTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AccountsDB for table TransactionType to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AccountsDB for table TransactionType to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Transaction> findAssociatedTransactions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated transactions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("transactionType.id = '" + id + "'");

        return transactionService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TransactionService instance
     */
    protected void setTransactionService(TransactionService service) {
        this.transactionService = service;
    }

}
