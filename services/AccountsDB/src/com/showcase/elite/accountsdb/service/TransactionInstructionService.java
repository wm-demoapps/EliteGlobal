/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.TransactionInstruction;

/**
 * Service object for domain model class {@link TransactionInstruction}.
 */
public interface TransactionInstructionService {

    /**
     * Creates a new TransactionInstruction. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TransactionInstruction if any.
     *
     * @param transactionInstruction Details of the TransactionInstruction to be created; value cannot be null.
     * @return The newly created TransactionInstruction.
     */
    TransactionInstruction create(@Valid TransactionInstruction transactionInstruction);


	/**
     * Returns TransactionInstruction by given id if exists.
     *
     * @param transactioninstructionId The id of the TransactionInstruction to get; value cannot be null.
     * @return TransactionInstruction associated with the given transactioninstructionId.
	 * @throws EntityNotFoundException If no TransactionInstruction is found.
     */
    TransactionInstruction getById(Integer transactioninstructionId);

    /**
     * Find and return the TransactionInstruction by given id if exists, returns null otherwise.
     *
     * @param transactioninstructionId The id of the TransactionInstruction to get; value cannot be null.
     * @return TransactionInstruction associated with the given transactioninstructionId.
     */
    TransactionInstruction findById(Integer transactioninstructionId);

	/**
     * Find and return the list of TransactionInstructions by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param transactioninstructionIds The id's of the TransactionInstruction to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TransactionInstructions associated with the given transactioninstructionIds.
     */
    List<TransactionInstruction> findByMultipleIds(List<Integer> transactioninstructionIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TransactionInstruction. It replaces all fields of the existing TransactionInstruction with the given transactionInstruction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TransactionInstruction if any.
     *
     * @param transactionInstruction The details of the TransactionInstruction to be updated; value cannot be null.
     * @return The updated TransactionInstruction.
     * @throws EntityNotFoundException if no TransactionInstruction is found with given input.
     */
    TransactionInstruction update(@Valid TransactionInstruction transactionInstruction);


    /**
     * Partially updates the details of an existing TransactionInstruction. It updates only the
     * fields of the existing TransactionInstruction which are passed in the transactionInstructionPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TransactionInstruction if any.
     *
     * @param transactioninstructionId The id of the TransactionInstruction to be deleted; value cannot be null.
     * @param transactionInstructionPatch The partial data of TransactionInstruction which is supposed to be updated; value cannot be null.
     * @return The updated TransactionInstruction.
     * @throws EntityNotFoundException if no TransactionInstruction is found with given input.
     */
    TransactionInstruction partialUpdate(Integer transactioninstructionId, Map<String, Object> transactionInstructionPatch);

    /**
     * Deletes an existing TransactionInstruction with the given id.
     *
     * @param transactioninstructionId The id of the TransactionInstruction to be deleted; value cannot be null.
     * @return The deleted TransactionInstruction.
     * @throws EntityNotFoundException if no TransactionInstruction found with the given id.
     */
    TransactionInstruction delete(Integer transactioninstructionId);

    /**
     * Deletes an existing TransactionInstruction with the given object.
     *
     * @param transactionInstruction The instance of the TransactionInstruction to be deleted; value cannot be null.
     */
    void delete(TransactionInstruction transactionInstruction);

    /**
     * Find all TransactionInstructions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TransactionInstructions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TransactionInstruction> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TransactionInstructions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TransactionInstructions.
     *
     * @see Pageable
     * @see Page
     */
    Page<TransactionInstruction> findAll(String query, Pageable pageable);

    /**
     * Exports all TransactionInstructions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TransactionInstructions matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TransactionInstructions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TransactionInstruction.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
