/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.PaymentMethod;
import com.showcase.elite.accountsdb.Transaction;


/**
 * ServiceImpl object for domain model class PaymentMethod.
 *
 * @see PaymentMethod
 */
@Service("AccountsDB.PaymentMethodService")
@Validated
@EntityService(entityClass = PaymentMethod.class, serviceId = "AccountsDB")
public class PaymentMethodServiceImpl implements PaymentMethodService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentMethodServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("AccountsDB.TransactionService")
    private TransactionService transactionService;

    @Autowired
    @Qualifier("AccountsDB.PaymentMethodDao")
    private WMGenericDao<PaymentMethod, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<PaymentMethod, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public PaymentMethod create(PaymentMethod paymentMethod) {
        LOGGER.debug("Creating a new PaymentMethod with information: {}", paymentMethod);

        PaymentMethod paymentMethodCreated = this.wmGenericDao.create(paymentMethod);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(paymentMethodCreated);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public PaymentMethod getById(Integer paymentmethodId) {
        LOGGER.debug("Finding PaymentMethod by id: {}", paymentmethodId);
        return this.wmGenericDao.findById(paymentmethodId);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public PaymentMethod findById(Integer paymentmethodId) {
        LOGGER.debug("Finding PaymentMethod by id: {}", paymentmethodId);
        try {
            return this.wmGenericDao.findById(paymentmethodId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PaymentMethod found with id: {}", paymentmethodId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public List<PaymentMethod> findByMultipleIds(List<Integer> paymentmethodIds, boolean orderedReturn) {
        LOGGER.debug("Finding PaymentMethods by ids: {}", paymentmethodIds);

        return this.wmGenericDao.findByMultipleIds(paymentmethodIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AccountsDBTransactionManager")
    @Override
    public PaymentMethod update(PaymentMethod paymentMethod) {
        LOGGER.debug("Updating PaymentMethod with information: {}", paymentMethod);

        this.wmGenericDao.update(paymentMethod);
        this.wmGenericDao.refresh(paymentMethod);

        return paymentMethod;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public PaymentMethod partialUpdate(Integer paymentmethodId, Map<String, Object>paymentMethodPatch) {
        LOGGER.debug("Partially Updating the PaymentMethod with id: {}", paymentmethodId);

        PaymentMethod paymentMethod = getById(paymentmethodId);

        try {
            ObjectReader paymentMethodReader = this.objectMapper.reader().forType(PaymentMethod.class).withValueToUpdate(paymentMethod);
            paymentMethod = paymentMethodReader.readValue(this.objectMapper.writeValueAsString(paymentMethodPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", paymentMethodPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        paymentMethod = update(paymentMethod);

        return paymentMethod;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public PaymentMethod delete(Integer paymentmethodId) {
        LOGGER.debug("Deleting PaymentMethod with id: {}", paymentmethodId);
        PaymentMethod deleted = this.wmGenericDao.findById(paymentmethodId);
        if (deleted == null) {
            LOGGER.debug("No PaymentMethod found with id: {}", paymentmethodId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), PaymentMethod.class.getSimpleName(), paymentmethodId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public void delete(PaymentMethod paymentMethod) {
        LOGGER.debug("Deleting PaymentMethod with {}", paymentMethod);
        this.wmGenericDao.delete(paymentMethod);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<PaymentMethod> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PaymentMethods");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<PaymentMethod> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PaymentMethods");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AccountsDB for table PaymentMethod to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AccountsDB for table PaymentMethod to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Transaction> findAssociatedTransactions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated transactions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("paymentMethod.id = '" + id + "'");

        return transactionService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TransactionService instance
     */
    protected void setTransactionService(TransactionService service) {
        this.transactionService = service;
    }

}
