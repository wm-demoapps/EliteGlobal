/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.Account;
import com.showcase.elite.accountsdb.Corporate;
import com.showcase.elite.accountsdb.CorporateUser;


/**
 * ServiceImpl object for domain model class Corporate.
 *
 * @see Corporate
 */
@Service("AccountsDB.CorporateService")
@Validated
@EntityService(entityClass = Corporate.class, serviceId = "AccountsDB")
public class CorporateServiceImpl implements CorporateService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CorporateServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("AccountsDB.CorporateUserService")
    private CorporateUserService corporateUserService;

    @Lazy
    @Autowired
    @Qualifier("AccountsDB.AccountService")
    private AccountService accountService;

    @Autowired
    @Qualifier("AccountsDB.CorporateDao")
    private WMGenericDao<Corporate, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Corporate, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public Corporate create(Corporate corporate) {
        LOGGER.debug("Creating a new Corporate with information: {}", corporate);

        Corporate corporateCreated = this.wmGenericDao.create(corporate);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(corporateCreated);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Corporate getById(Integer corporateId) {
        LOGGER.debug("Finding Corporate by id: {}", corporateId);
        return this.wmGenericDao.findById(corporateId);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Corporate findById(Integer corporateId) {
        LOGGER.debug("Finding Corporate by id: {}", corporateId);
        try {
            return this.wmGenericDao.findById(corporateId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Corporate found with id: {}", corporateId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public List<Corporate> findByMultipleIds(List<Integer> corporateIds, boolean orderedReturn) {
        LOGGER.debug("Finding Corporates by ids: {}", corporateIds);

        return this.wmGenericDao.findByMultipleIds(corporateIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AccountsDBTransactionManager")
    @Override
    public Corporate update(Corporate corporate) {
        LOGGER.debug("Updating Corporate with information: {}", corporate);

        this.wmGenericDao.update(corporate);
        this.wmGenericDao.refresh(corporate);

        return corporate;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public Corporate partialUpdate(Integer corporateId, Map<String, Object>corporatePatch) {
        LOGGER.debug("Partially Updating the Corporate with id: {}", corporateId);

        Corporate corporate = getById(corporateId);

        try {
            ObjectReader corporateReader = this.objectMapper.reader().forType(Corporate.class).withValueToUpdate(corporate);
            corporate = corporateReader.readValue(this.objectMapper.writeValueAsString(corporatePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", corporatePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        corporate = update(corporate);

        return corporate;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public Corporate delete(Integer corporateId) {
        LOGGER.debug("Deleting Corporate with id: {}", corporateId);
        Corporate deleted = this.wmGenericDao.findById(corporateId);
        if (deleted == null) {
            LOGGER.debug("No Corporate found with id: {}", corporateId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Corporate.class.getSimpleName(), corporateId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public void delete(Corporate corporate) {
        LOGGER.debug("Deleting Corporate with {}", corporate);
        this.wmGenericDao.delete(corporate);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Corporate> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Corporates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Corporate> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Corporates");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AccountsDB for table Corporate to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AccountsDB for table Corporate to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Account> findAssociatedAccounts(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated accounts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("corporate.id = '" + id + "'");

        return accountService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<CorporateUser> findAssociatedCorporateUsers(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated corporateUsers");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("corporate.id = '" + id + "'");

        return corporateUserService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service CorporateUserService instance
     */
    protected void setCorporateUserService(CorporateUserService service) {
        this.corporateUserService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AccountService instance
     */
    protected void setAccountService(AccountService service) {
        this.accountService = service;
    }

}
