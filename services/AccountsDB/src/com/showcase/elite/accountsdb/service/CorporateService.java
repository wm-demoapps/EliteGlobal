/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.Account;
import com.showcase.elite.accountsdb.Corporate;
import com.showcase.elite.accountsdb.CorporateUser;

/**
 * Service object for domain model class {@link Corporate}.
 */
public interface CorporateService {

    /**
     * Creates a new Corporate. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Corporate if any.
     *
     * @param corporate Details of the Corporate to be created; value cannot be null.
     * @return The newly created Corporate.
     */
    Corporate create(@Valid Corporate corporate);


	/**
     * Returns Corporate by given id if exists.
     *
     * @param corporateId The id of the Corporate to get; value cannot be null.
     * @return Corporate associated with the given corporateId.
	 * @throws EntityNotFoundException If no Corporate is found.
     */
    Corporate getById(Integer corporateId);

    /**
     * Find and return the Corporate by given id if exists, returns null otherwise.
     *
     * @param corporateId The id of the Corporate to get; value cannot be null.
     * @return Corporate associated with the given corporateId.
     */
    Corporate findById(Integer corporateId);

	/**
     * Find and return the list of Corporates by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param corporateIds The id's of the Corporate to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Corporates associated with the given corporateIds.
     */
    List<Corporate> findByMultipleIds(List<Integer> corporateIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Corporate. It replaces all fields of the existing Corporate with the given corporate.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Corporate if any.
     *
     * @param corporate The details of the Corporate to be updated; value cannot be null.
     * @return The updated Corporate.
     * @throws EntityNotFoundException if no Corporate is found with given input.
     */
    Corporate update(@Valid Corporate corporate);


    /**
     * Partially updates the details of an existing Corporate. It updates only the
     * fields of the existing Corporate which are passed in the corporatePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Corporate if any.
     *
     * @param corporateId The id of the Corporate to be deleted; value cannot be null.
     * @param corporatePatch The partial data of Corporate which is supposed to be updated; value cannot be null.
     * @return The updated Corporate.
     * @throws EntityNotFoundException if no Corporate is found with given input.
     */
    Corporate partialUpdate(Integer corporateId, Map<String, Object> corporatePatch);

    /**
     * Deletes an existing Corporate with the given id.
     *
     * @param corporateId The id of the Corporate to be deleted; value cannot be null.
     * @return The deleted Corporate.
     * @throws EntityNotFoundException if no Corporate found with the given id.
     */
    Corporate delete(Integer corporateId);

    /**
     * Deletes an existing Corporate with the given object.
     *
     * @param corporate The instance of the Corporate to be deleted; value cannot be null.
     */
    void delete(Corporate corporate);

    /**
     * Find all Corporates matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Corporates.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Corporate> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Corporates matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Corporates.
     *
     * @see Pageable
     * @see Page
     */
    Page<Corporate> findAll(String query, Pageable pageable);

    /**
     * Exports all Corporates matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Corporates matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Corporates in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Corporate.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated accounts for given Corporate id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Account instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Account> findAssociatedAccounts(Integer id, Pageable pageable);

    /*
     * Returns the associated corporateUsers for given Corporate id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated CorporateUser instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<CorporateUser> findAssociatedCorporateUsers(Integer id, Pageable pageable);

}
