/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.Account;
import com.showcase.elite.accountsdb.AccountType;

/**
 * Service object for domain model class {@link AccountType}.
 */
public interface AccountTypeService {

    /**
     * Creates a new AccountType. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AccountType if any.
     *
     * @param accountType Details of the AccountType to be created; value cannot be null.
     * @return The newly created AccountType.
     */
    AccountType create(@Valid AccountType accountType);


	/**
     * Returns AccountType by given id if exists.
     *
     * @param accounttypeId The id of the AccountType to get; value cannot be null.
     * @return AccountType associated with the given accounttypeId.
	 * @throws EntityNotFoundException If no AccountType is found.
     */
    AccountType getById(Integer accounttypeId);

    /**
     * Find and return the AccountType by given id if exists, returns null otherwise.
     *
     * @param accounttypeId The id of the AccountType to get; value cannot be null.
     * @return AccountType associated with the given accounttypeId.
     */
    AccountType findById(Integer accounttypeId);

	/**
     * Find and return the list of AccountTypes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param accounttypeIds The id's of the AccountType to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return AccountTypes associated with the given accounttypeIds.
     */
    List<AccountType> findByMultipleIds(List<Integer> accounttypeIds, boolean orderedReturn);


    /**
     * Updates the details of an existing AccountType. It replaces all fields of the existing AccountType with the given accountType.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AccountType if any.
     *
     * @param accountType The details of the AccountType to be updated; value cannot be null.
     * @return The updated AccountType.
     * @throws EntityNotFoundException if no AccountType is found with given input.
     */
    AccountType update(@Valid AccountType accountType);


    /**
     * Partially updates the details of an existing AccountType. It updates only the
     * fields of the existing AccountType which are passed in the accountTypePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AccountType if any.
     *
     * @param accounttypeId The id of the AccountType to be deleted; value cannot be null.
     * @param accountTypePatch The partial data of AccountType which is supposed to be updated; value cannot be null.
     * @return The updated AccountType.
     * @throws EntityNotFoundException if no AccountType is found with given input.
     */
    AccountType partialUpdate(Integer accounttypeId, Map<String, Object> accountTypePatch);

    /**
     * Deletes an existing AccountType with the given id.
     *
     * @param accounttypeId The id of the AccountType to be deleted; value cannot be null.
     * @return The deleted AccountType.
     * @throws EntityNotFoundException if no AccountType found with the given id.
     */
    AccountType delete(Integer accounttypeId);

    /**
     * Deletes an existing AccountType with the given object.
     *
     * @param accountType The instance of the AccountType to be deleted; value cannot be null.
     */
    void delete(AccountType accountType);

    /**
     * Find all AccountTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AccountTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<AccountType> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all AccountTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AccountTypes.
     *
     * @see Pageable
     * @see Page
     */
    Page<AccountType> findAll(String query, Pageable pageable);

    /**
     * Exports all AccountTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all AccountTypes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the AccountTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the AccountType.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated accounts for given AccountType id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Account instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Account> findAssociatedAccounts(Integer id, Pageable pageable);

}
