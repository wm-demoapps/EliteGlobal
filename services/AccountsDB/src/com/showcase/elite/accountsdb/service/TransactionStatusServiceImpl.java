/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.Transaction;
import com.showcase.elite.accountsdb.TransactionStatus;


/**
 * ServiceImpl object for domain model class TransactionStatus.
 *
 * @see TransactionStatus
 */
@Service("AccountsDB.TransactionStatusService")
@Validated
@EntityService(entityClass = TransactionStatus.class, serviceId = "AccountsDB")
public class TransactionStatusServiceImpl implements TransactionStatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TransactionStatusServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("AccountsDB.TransactionService")
    private TransactionService transactionService;

    @Autowired
    @Qualifier("AccountsDB.TransactionStatusDao")
    private WMGenericDao<TransactionStatus, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TransactionStatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public TransactionStatus create(TransactionStatus transactionStatus) {
        LOGGER.debug("Creating a new TransactionStatus with information: {}", transactionStatus);

        TransactionStatus transactionStatusCreated = this.wmGenericDao.create(transactionStatus);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(transactionStatusCreated);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public TransactionStatus getById(Integer transactionstatusId) {
        LOGGER.debug("Finding TransactionStatus by id: {}", transactionstatusId);
        return this.wmGenericDao.findById(transactionstatusId);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public TransactionStatus findById(Integer transactionstatusId) {
        LOGGER.debug("Finding TransactionStatus by id: {}", transactionstatusId);
        try {
            return this.wmGenericDao.findById(transactionstatusId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TransactionStatus found with id: {}", transactionstatusId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public List<TransactionStatus> findByMultipleIds(List<Integer> transactionstatusIds, boolean orderedReturn) {
        LOGGER.debug("Finding TransactionStatuses by ids: {}", transactionstatusIds);

        return this.wmGenericDao.findByMultipleIds(transactionstatusIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AccountsDBTransactionManager")
    @Override
    public TransactionStatus update(TransactionStatus transactionStatus) {
        LOGGER.debug("Updating TransactionStatus with information: {}", transactionStatus);

        this.wmGenericDao.update(transactionStatus);
        this.wmGenericDao.refresh(transactionStatus);

        return transactionStatus;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public TransactionStatus partialUpdate(Integer transactionstatusId, Map<String, Object>transactionStatusPatch) {
        LOGGER.debug("Partially Updating the TransactionStatus with id: {}", transactionstatusId);

        TransactionStatus transactionStatus = getById(transactionstatusId);

        try {
            ObjectReader transactionStatusReader = this.objectMapper.reader().forType(TransactionStatus.class).withValueToUpdate(transactionStatus);
            transactionStatus = transactionStatusReader.readValue(this.objectMapper.writeValueAsString(transactionStatusPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", transactionStatusPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        transactionStatus = update(transactionStatus);

        return transactionStatus;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public TransactionStatus delete(Integer transactionstatusId) {
        LOGGER.debug("Deleting TransactionStatus with id: {}", transactionstatusId);
        TransactionStatus deleted = this.wmGenericDao.findById(transactionstatusId);
        if (deleted == null) {
            LOGGER.debug("No TransactionStatus found with id: {}", transactionstatusId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TransactionStatus.class.getSimpleName(), transactionstatusId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public void delete(TransactionStatus transactionStatus) {
        LOGGER.debug("Deleting TransactionStatus with {}", transactionStatus);
        this.wmGenericDao.delete(transactionStatus);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<TransactionStatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TransactionStatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<TransactionStatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TransactionStatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AccountsDB for table TransactionStatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AccountsDB for table TransactionStatus to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Transaction> findAssociatedTransactions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated transactions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("transactionStatus.id = '" + id + "'");

        return transactionService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TransactionService instance
     */
    protected void setTransactionService(TransactionService service) {
        this.transactionService = service;
    }

}
