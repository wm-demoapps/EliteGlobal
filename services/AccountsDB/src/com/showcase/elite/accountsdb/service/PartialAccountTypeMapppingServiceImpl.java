/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.showcase.elite.accountsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.showcase.elite.accountsdb.PartialAccountTypeMappping;


/**
 * ServiceImpl object for domain model class PartialAccountTypeMappping.
 *
 * @see PartialAccountTypeMappping
 */
@Service("AccountsDB.PartialAccountTypeMapppingService")
@Validated
@EntityService(entityClass = PartialAccountTypeMappping.class, serviceId = "AccountsDB")
public class PartialAccountTypeMapppingServiceImpl implements PartialAccountTypeMapppingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartialAccountTypeMapppingServiceImpl.class);


    @Autowired
    @Qualifier("AccountsDB.PartialAccountTypeMapppingDao")
    private WMGenericDao<PartialAccountTypeMappping, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<PartialAccountTypeMappping, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public PartialAccountTypeMappping create(PartialAccountTypeMappping partialAccountTypeMappping) {
        LOGGER.debug("Creating a new PartialAccountTypeMappping with information: {}", partialAccountTypeMappping);

        PartialAccountTypeMappping partialAccountTypeMapppingCreated = this.wmGenericDao.create(partialAccountTypeMappping);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(partialAccountTypeMapppingCreated);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public PartialAccountTypeMappping getById(Integer partialaccounttypemapppingId) {
        LOGGER.debug("Finding PartialAccountTypeMappping by id: {}", partialaccounttypemapppingId);
        return this.wmGenericDao.findById(partialaccounttypemapppingId);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public PartialAccountTypeMappping findById(Integer partialaccounttypemapppingId) {
        LOGGER.debug("Finding PartialAccountTypeMappping by id: {}", partialaccounttypemapppingId);
        try {
            return this.wmGenericDao.findById(partialaccounttypemapppingId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PartialAccountTypeMappping found with id: {}", partialaccounttypemapppingId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public List<PartialAccountTypeMappping> findByMultipleIds(List<Integer> partialaccounttypemapppingIds, boolean orderedReturn) {
        LOGGER.debug("Finding PartialAccountTypeMapppings by ids: {}", partialaccounttypemapppingIds);

        return this.wmGenericDao.findByMultipleIds(partialaccounttypemapppingIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public PartialAccountTypeMappping getByAccountTypeId(Integer accountTypeId) {
        Map<String, Object> accountTypeIdMap = new HashMap<>();
        accountTypeIdMap.put("accountTypeId", accountTypeId);

        LOGGER.debug("Finding PartialAccountTypeMappping by unique keys: {}", accountTypeIdMap);
        return this.wmGenericDao.findByUniqueKey(accountTypeIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AccountsDBTransactionManager")
    @Override
    public PartialAccountTypeMappping update(PartialAccountTypeMappping partialAccountTypeMappping) {
        LOGGER.debug("Updating PartialAccountTypeMappping with information: {}", partialAccountTypeMappping);

        this.wmGenericDao.update(partialAccountTypeMappping);
        this.wmGenericDao.refresh(partialAccountTypeMappping);

        return partialAccountTypeMappping;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public PartialAccountTypeMappping partialUpdate(Integer partialaccounttypemapppingId, Map<String, Object>partialAccountTypeMapppingPatch) {
        LOGGER.debug("Partially Updating the PartialAccountTypeMappping with id: {}", partialaccounttypemapppingId);

        PartialAccountTypeMappping partialAccountTypeMappping = getById(partialaccounttypemapppingId);

        try {
            ObjectReader partialAccountTypeMapppingReader = this.objectMapper.reader().forType(PartialAccountTypeMappping.class).withValueToUpdate(partialAccountTypeMappping);
            partialAccountTypeMappping = partialAccountTypeMapppingReader.readValue(this.objectMapper.writeValueAsString(partialAccountTypeMapppingPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", partialAccountTypeMapppingPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        partialAccountTypeMappping = update(partialAccountTypeMappping);

        return partialAccountTypeMappping;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public PartialAccountTypeMappping delete(Integer partialaccounttypemapppingId) {
        LOGGER.debug("Deleting PartialAccountTypeMappping with id: {}", partialaccounttypemapppingId);
        PartialAccountTypeMappping deleted = this.wmGenericDao.findById(partialaccounttypemapppingId);
        if (deleted == null) {
            LOGGER.debug("No PartialAccountTypeMappping found with id: {}", partialaccounttypemapppingId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), PartialAccountTypeMappping.class.getSimpleName(), partialaccounttypemapppingId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AccountsDBTransactionManager")
    @Override
    public void delete(PartialAccountTypeMappping partialAccountTypeMappping) {
        LOGGER.debug("Deleting PartialAccountTypeMappping with {}", partialAccountTypeMappping);
        this.wmGenericDao.delete(partialAccountTypeMappping);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<PartialAccountTypeMappping> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PartialAccountTypeMapppings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<PartialAccountTypeMappping> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PartialAccountTypeMapppings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AccountsDB for table PartialAccountTypeMappping to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AccountsDB for table PartialAccountTypeMappping to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AccountsDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
